{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","bestArbitrageProfit","setBestArbitrageProfit","bestArbitrageTrade","setBestArbitrageTrade","profit","updateArbitrageProfit","newProfit","arbitrageTrade","className","onSubmit","event","preventDefault","symbols","target","elements","s1","value","s2","startValue","console","log","web3","Web3","givenProvider","fetch","then","response","json","contractABI","a","orfeed","eth","Contract","purchaseExchg","sellExchg","p","s","methods","getExchangeRate","call","value1","value2","buy","sell","catch","error","arbitrage","htmlFor","type","id","name","defaultValue","maxLength","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72cbc065.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\n\nfunction App() {\n\n  const [ bestArbitrageProfit, setBestArbitrageProfit ] = useState();\n  const [ bestArbitrageTrade, setBestArbitrageTrade ] = useState('');\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const symbols = [ event.target.elements.s1.value, event.target.elements.s2.value ];\n    const startValue = event.target.elements.startValue.value;\n    console.log(`Submit: ${symbols[0]}, ${symbols[1]}`);\n    arbitrage(symbols, startValue);\n  }\n\n  function arbitrage(symbols, startValue) {\n    const web3 = new Web3(Web3.givenProvider);\n\n    fetch('OrFeed.abi')\n    .then(response => response.json())\n    .then( async contractABI => {\n      const contractAddr = '0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336';\n      const orfeed = new web3.eth.Contract(contractABI, contractAddr);\n\n      console.log('Got here!');\n\n      const purchaseExchg = [ \"BANCOR\", \"BUY-KYBER-EXCHANGE\", \"BUY-UNISWAP-EXCHANGE\" ];\n      const sellExchg = [ \"BANCOR\", \"SELL-KYBER-EXCHANGE\", \"SELL-UNISWAP-EXCHANGE\" ];\n\n      setBestArbitrageTrade('');\n      profit=0;\n      for(const p of purchaseExchg) {\n        for(const s of sellExchg) {\n          orfeed.methods.getExchangeRate(symbols[0],symbols[1],p,startValue).call()\n          .then( value1 => {\n            orfeed.methods.getExchangeRate(symbols[1],symbols[0],s,value1).call()\n            .then( value2 => {\n              //const arbitrageTrade = `Buy   ${p} : ${symbols[0]}:${startValue} -> ${symbols[1]}:${value1} \\nSell ${s} : ${symbols[1]}:${value1} -> ${symbols[0]}:${value2}`\n              const arbitrageTrade = {\n                buy: `${p} : ${symbols[0]}:${startValue} -> ${symbols[1]}:${value1}`,\n                sell: `${s} : ${symbols[1]}:${value1} -> ${symbols[0]}:${value2}`\n              };\n              //console.log(`${arbitrageTrade}\\narbitrageProfit: ${value2-startValue}\\n`);\n              updateArbitrageProfit(value2-startValue, arbitrageTrade);\n            })\n            .catch(console.error);\n          })\n          .catch(console.error);\n        }\n      }\n\n    })\n    .catch(console.error);\n\n\n\n\n  }\n\n  let profit=0;\n\n  function updateArbitrageProfit(newProfit, arbitrageTrade) {\n    if (newProfit>profit) {\n      profit=newProfit;\n      setBestArbitrageProfit(profit);\n      setBestArbitrageTrade(arbitrageTrade);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Arbitrage Calculator</h1>\n      </header>\n      <section>\n        <div className=\"container\">\n          <div className=\"left\">\n          </div>\n          <div className=\"center\">\n            <br/>\n            <br/>\n            <form onSubmit={handleSubmit}>\n              <ul className=\"wrapper\">\n                <li className=\"form-row\"><label htmlFor=\"s1\">Symbol1</label><input type=\"text\" id=\"s1\" name=\"s1\" defaultValue=\"KNC\" maxLength=\"5\"/></li>\n                <li className=\"form-row\"><label htmlFor=\"s2\">Symbol2</label><input type=\"text\" id=\"s2\" name=\"s2\" defaultValue=\"BAT\" maxLength=\"5\"/></li>\n                <li className=\"form-row\"><label htmlFor=\"s3\">Initial amount</label><input type=\"number\" id=\"s3\" name=\"startValue\" defaultValue=\"1000\" /></li>\n                <li className=\"form-row\"><input type=\"submit\" value=\"Calculate\"/></li>\n              </ul>\n            </form>\n            <br/>\n            <hr/>\n            <br/>\n            <p>The optimal arbitrage profit: {bestArbitrageProfit}</p>\n            <p>{bestArbitrageTrade.buy}</p>\n            <p>{bestArbitrageTrade.sell}</p>\n          </div>\n          <div className=\"right\">\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}