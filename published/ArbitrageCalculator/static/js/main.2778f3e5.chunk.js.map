{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","bestArbitrageProfit","setBestArbitrageProfit","bestArbitrageTrade","setBestArbitrageTrade","buyExchg","sellExchg","orfeed","maxAndPos","array","max","Infinity","len","length","pos","arbitrationProfit","symbolPair","startValue","exchanges","a","console","log","promises","map","pExchg","methods","getExchangeRate","call","Promise","resolve","reject","all","p","catch","e","then","values","mp","parseInt","fromSymbol","toSymbol","endValue","toString","exchange","err","error","triangleArbitration","symbolList","buyExchanges","sellExchanges","tradeValue","trades","thisTrade","push","className","onSubmit","event","preventDefault","target","elements","s1","value","s2","s3","web3","Web3","givenProvider","fetch","response","json","contractABI","eth","Contract","list","forEach","aTrade","arbitrage","htmlFor","type","id","name","defaultValue","maxLength","x","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2778f3e5.chunk.js","sourcesContent":["/*\r\n    Triangle Arbitrage Calculator\r\n    author: Jorge Londono\r\n\r\n */\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\n\r\nfunction App() {\r\n\r\n  const [ bestArbitrageProfit, setBestArbitrageProfit ] = useState();\r\n  const [ bestArbitrageTrade, setBestArbitrageTrade ] = useState([]);\r\n\r\n  // Data from these exchanges available\r\n  const buyExchg = [ \"BANCOR\", \"BUY-KYBER-EXCHANGE\", \"BUY-UNISWAP-EXCHANGE\" ];\r\n  const sellExchg = [ \"BANCOR\", \"SELL-KYBER-EXCHANGE\", \"SELL-UNISWAP-EXCHANGE\" ];\r\n\r\n  // Address of the OrFeed contract on mainnet\r\n  const contractAddr = '0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336';\r\n  let orfeed = null;\r\n\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const symbolList = [ event.target.elements.s1.value, event.target.elements.s2.value, event.target.elements.s3.value ];\r\n    const startValue = event.target.elements.startValue.value.toString();\r\n    console.log(`Submit: ${symbolList}`);\r\n    arbitrage(symbolList, startValue);\r\n  }\r\n\r\n\r\n  // Instanciate the contract and start the triangular arbitrage computation\r\n  function arbitrage(symbolList, startValue) {\r\n    const web3 = new Web3(Web3.givenProvider);\r\n\r\n    fetch('OrFeed.abi')\r\n    .then(response => response.json())\r\n    .then( async contractABI => {\r\n      orfeed = new web3.eth.Contract(contractABI, contractAddr);\r\n      triangleArbitration(symbolList, startValue, buyExchg, sellExchg)\r\n      .then(trades => {\r\n        let list = [];\r\n        trades.forEach( aTrade => {\r\n          list.push(`${aTrade.exchange} : ${aTrade.fromSymbol}:${aTrade.startValue}->${aTrade.toSymbol}:${aTrade.endValue}`)\r\n        });\r\n        setBestArbitrageTrade(list);\r\n        setBestArbitrageProfit(trades[trades.length-1].endValue-trades[0].startValue);\r\n      })\r\n      .catch(console.error);\r\n    })\r\n    .catch(console.error);\r\n  }\r\n\r\n\r\n  // maximum and its position in an array\r\n  function maxAndPos(array) {\r\n    let max = -Infinity;\r\n    let len = array.length;\r\n    let pos = -1;\r\n    while(len--) {\r\n      if (array[len]>max) { max=array[len]; pos=len; }\r\n    }\r\n    return { max: max, pos: pos };\r\n  }\r\n\r\n\r\n  // Compute the cost of swap in different exchanges\r\n  async function arbitrationProfit(symbolPair, startValue, exchanges) {\r\n    // console.log(orfeed);\r\n    console.log(`pair: ${symbolPair}`);\r\n    let promises = exchanges.map( pExchg => orfeed.methods.getExchangeRate(symbolPair[0],symbolPair[1],pExchg,startValue).call() );\r\n    return new Promise( function(resolve, reject) {\r\n      //Promise.all(promises).then( values => {\r\n      Promise.all(promises.map(p => p.catch(e => -Infinity)))\r\n      .then( values => {\r\n        console.log(`Values: ${values}`);\r\n        //let mp = maxAndPos(values.map(x => (x instanceof Error) ? -Infinity:parseInt(x) ));\r\n        let mp = maxAndPos(values.map(parseInt));\r\n        //console.log(mp);\r\n        resolve({\r\n          fromSymbol: symbolPair[0],\r\n          toSymbol: symbolPair[1],\r\n          startValue: startValue,\r\n          endValue: mp.max.toString(),\r\n          exchange: exchanges[mp.pos]\r\n        });\r\n      })\r\n      .catch(err => console.error(`Promise.all: ${err}`))\r\n    });\r\n  }\r\n\r\n\r\n  // Compute the triangular arbitrage, obtain the best sequence of trades\r\n  async function triangleArbitration(symbolList, startValue, buyExchanges, sellExchanges) {\r\n    if (symbolList.length<2) return;\r\n    let tradeValue = startValue;\r\n    let trades = [];\r\n    for(let pos=0; pos<symbolList.length; pos++) {\r\n      const symbolPair = [ symbolList[pos], symbolList[(pos+1)%symbolList.length] ];\r\n      console.log(`${symbolPair}`);\r\n      let thisTrade = await arbitrationProfit(symbolPair, tradeValue, pos+1<symbolList.length ? buyExchanges : buyExchanges);\r\n      trades.push(thisTrade);\r\n      tradeValue = thisTrade.endValue;\r\n    }\r\n    console.log(trades);\r\n    console.log(`Net profit: ${tradeValue-startValue}`);\r\n    return trades;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Arbitrage Calculator</h1>\r\n      </header>\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n          </div>\r\n          <div className=\"center\">\r\n            <br/>\r\n            <br/>\r\n            <form onSubmit={handleSubmit}>\r\n              <ul className=\"wrapper\">\r\n                <li className=\"form-row\"><label htmlFor=\"s1\">Symbol1</label><input type=\"text\" id=\"s1\" name=\"s1\" defaultValue=\"KNC\" maxLength=\"5\"/></li>\r\n                <li className=\"form-row\"><label htmlFor=\"s2\">Symbol2</label><input type=\"text\" id=\"s2\" name=\"s2\" defaultValue=\"BAT\" maxLength=\"5\"/></li>\r\n                <li className=\"form-row\"><label htmlFor=\"s3\">Symbol3</label><input type=\"text\" id=\"s3\" name=\"s3\" defaultValue=\"SAI\" maxLength=\"5\"/></li>\r\n                <li className=\"form-row\"><label htmlFor=\"amount\">Initial amount</label><input type=\"number\" id=\"amount\" name=\"startValue\" defaultValue=\"100000000000000000000\" /></li>\r\n                <li className=\"form-row\"><input type=\"submit\" value=\"Calculate\"/></li>\r\n              </ul>\r\n            </form>\r\n            <br/>\r\n            <hr/>\r\n            <br/>\r\n            <p>The optimal arbitrage profit: {bestArbitrageProfit}</p>\r\n            <ol>{ bestArbitrageTrade.map((x,i) => <li key={i}>{x}</li>) }</ol>\r\n          </div>\r\n          <div className=\"right\">\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}